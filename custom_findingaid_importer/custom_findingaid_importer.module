<?php

/**
 * @file
 * Contains custom_findingaid_importer.module.
 */
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\custom_findingaid_importer\Utility\xmlTransformerHelper;

/**
 * Implements hook_form_alter().
 */
  function custom_findingaid_importer_form_alter(&$form, FormStateInterface $form_state, $form_id) {
        $target_forms = ['node_resource_ead_form', 'node_resource_ead_edit_form'];
        if (in_array($form_id, $target_forms) || strpos($form_id, 'node_resource_ead_edit_form')===0) {
                $route_match = \Drupal::routeMatch()->getRouteName();   
                if  ($route_match == 'node.add'|| $route_match == 'entity.node.edit_form') {
                custom_findingaid_importer_newead_form($form, $form_state); 
                }  
        }
}

/**
 * Define the customized form to add/edit resource_ead type node.
 */
  function custom_findingaid_importer_newead_form(&$form, FormStateInterface $form_state) {
        $node = $form_state->getFormObject()->getEntity();
        //load xslt fids options from drupal configuration
        $config = \Drupal::config('custom_findingaid_importer.settings');
        $xslt_opts = [];
        $xslt_files =$config->get('xslt_aeon_files') ?: [];
        foreach ($xslt_files as $fkey => $fdata) {
                //$fkey is file_desc
                $tmp_fid = $fdata['xslt_file'];
                $file = File::load($tmp_fid);
                $xslt_opts[$fkey] = $fkey;
        }

        //construct form section
         $form['transform_xml'] = [
                '#type' => 'details',
                '#title' => t('Generate Finding Aid content from EAD with an XSLT template'),
                '#open' => TRUE,
        ];
        $form['transform_xml']['xml_file'] = [
                '#type' => 'managed_file',
                '#title' => t('Upload Finding Aid EAD file to process'),
                '#description' => t('The finding aid XML file to be processed'),
                '#upload_validators' => [ 
                        'file_validate_extensions' => ['xml', 'ead', 'ead3'],
                        ],
                '#upload_location' => 'temporary://findingaid-xml',
                '#required' => $node->isNew(),
        ];
        $form['transform_xml']['xslt_file'] = [
                '#type' => 'select',
                '#title' => t('Select XSLT File used to process the EAD'),
                '#description' => t('The XSLT template used to transform the EAD to HTML'),
                '#options' => $xslt_opts,
                '#empty_option' => t(' -- Select a transformation template --  '),
                '#required' => TRUE,
        ];
        $form['title']['#access'] = FALSE;
        $form['body']['#access'] = FALSE;
        $form['field_uri']['#access'] = FALSE;
        $form['field_ead_id']['#access'] = FALSE;
        $form['field_resource_identifier']['#access'] = FALSE;

        $form['actions']['submit']['#value'] = t('Transform');
        $form['actions']['submit']['#submit'][] = 'custom_findingaid_importer_ead_submit';
}

/**
 * Implements hook_resource_ead_presave().
 * The hook is invoked before the entity is saved to the database.
 */
  function custom_findingaid_importer_entity_presave(EntityInterface $entity) {
    if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'resource_ead'
	    && $entity->isNew()) {
        $route_match = \Drupal::routeMatch()->getRouteName();
        if ( $route_match == 'node.add' ) {
                try {
                //requires to have title on entity db storage
                $entity_uuid = $entity->uuid();
	        $entity->setTitle($entity_uuid);
                } catch (\Exception $e) {
                \Drupal::logger('custom_findingaid_importer')->error(t('Title creation failed: @err', ['%err' => $e->getMessage()]));
                        }
                }
        }
}

/**
 * Define the customized submit handler for resource_ead type node.
 */
  function custom_findingaid_importer_ead_submit(array &$form, FormStateInterface $form_state) {
        $node = $form_state->getFormObject()->getEntity();
        //load the xml and xslt files
        $xml_fid = $form_state->getValue('xml_file')['0']; 
        $xml_file = File::load($xml_fid);
        $xml_path = \Drupal::service('file_system')->realpath($xml_file->getFileUri()); 
        
        $xslt_data = $form_state->getValue('xslt_file');
        $curr_xslt = \Drupal::config('custom_findingaid_importer.settings')->get('xslt_aeon_files.'.$xslt_data);

        //file transformation
        $data_parameters = [
                'data_src' => "others",
                'xml_path' => $xml_path,
        ];
        $trans_html = xmlTransformerHelper::xmlTransformer($data_parameters, $curr_xslt);
        if ($trans_html === FALSE) {
		//Detail failure log captured in Utility/xmlTransformerHelper function
                \Drupal::logger('custom_findingaid_importer')->error(t('Failed to transform the EAD with XSLT.'));
                return;
        }

        //retrieve additional fields from xml
        $xml_doc = new  \DOMDocument();                                                                  
        $xml_doc->load($xml_path);
	$titleNode = $xml_doc->getElementsByTagName("unittitle")->item(0)->nodeValue;
	// This string need translation
        $title = $xml_doc->getElementsByTagName("titleproper")->item(0)->nodeValue ?? 'Guide to '.$titleNode; 
        $title_formatted = trim(preg_replace('/\s+/',' ', strip_tags($title)));
        $resource_identifier =  $xml_doc->getElementsByTagName("unitid")->item(0)->nodeValue ?? '';                                                                       
        $eadidNode = $xml_doc->getElementsByTagName("eadid");
        if ($eadidNode->length > 0) {
                $eadId = $eadidNode->item(0)->nodeValue;
        } else {
                $eadId = '';
        }   
        //capture findingaid data
	$node->setTitle($title_formatted);
        $node->set ('body', [
                'value' => $trans_html,
                'format' => 'full_html',
                ]);
        $node->set('field_uri', $xml_path);
        $node->set('field_resource_identifier', $resource_identifier);
        $node->set ('field_ead_id', [
                'value' => $eadId,
                'format' => 'plain_text',
        ]);
        try {
                $node->save();
                \Drupal::logger('custom_findingaid_importer')->info('Finding Aid has been transformed and saved for Finding Aid type node: @id', ['@id' =>$node->id()]);
        } catch (\Exception $e) {
                \Drupal::logger('custom_findingaid_importer')->error('Failed to save a Finding Aid type node for Finding Aid record titled: @findingaidtitle', ['@findingaidtitle' =>$title_formatted]);
        }
 } 

/**
 * Implements hook_help().
 */
function custom_findingaid_importer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.custom_findingaid_importer':
      return t('This module allows a user to upload a Finding Aid EAD file, and tranform it to HTML using a custom XSLT');
  }
}
